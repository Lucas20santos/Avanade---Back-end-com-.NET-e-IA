# Projeto Smartphone

-----

## üöÄ Guia de Desenvolvimento Passo a Passo (Roadmap Incremental)

### Etapa 1: Prepara√ß√£o do Ambiente e Estrutura Inicial (Foundation)

Antes de tudo, precisamos organizar o projeto seguindo a arquitetura sugerida para manter o c√≥digo limpo e test√°vel.

## Sua Tarefa (1.1): Criar a Solu√ß√£o e Projetos

1. Crie uma pasta principal para o projeto (ex: `SmartphoneProject`).
1. Dentro dela, crie a **Solution (.sln)** para agrupar todos os projetos:

```bash
    dotnet new sln -n SmartphoneSolution 
```

1. Crie os tr√™s projetos essenciais:
      * **SmartphoneCore:** Uma biblioteca de classes (`classlib`) para a l√≥gica principal.
      * **SmartphoneApp:** Um projeto de console (`console`) para a demonstra√ß√£o e execu√ß√£o.
      * **SmartphoneCore.Tests:** Um projeto de testes (`xunit`).
    <!-- end list -->
    ```bash
    dotnet new classlib -n SmartphoneCore
    dotnet new console -n SmartphoneApp
    dotnet new xunit -n SmartphoneCore.Tests
    ```

1. Adicione os projetos √† Solution:

```bash
dotnet sln add SmartphoneCore/SmartphoneCore.csproj
dotnet sln add SmartphoneApp/SmartphoneApp.csproj
dotnet sln add SmartphoneCore.Tests/SmartphoneCore.Tests.csproj
    ```

1. Adicione as refer√™ncias necess√°rias (o App e os Testes precisam "enxergar" o Core):

```bash
    dotnet add SmartphoneApp/SmartphoneApp.csproj reference SmartphoneCore/SmartphoneCore.csproj
    dotnet add SmartphoneCore.Tests/SmartphoneCore.Tests.csproj reference SmartphoneCore/SmartphoneCore.csproj
```

1. Crie a estrutura de pastas dentro de `SmartphoneCore` conforme o guia: `Models/`, `Services/`, `Persistence/`, `Events/`, `Utils/`.

**Resultado Esperado:** Um ambiente configurado com a separa√ß√£o de responsabilidades (l√≥gica, execu√ß√£o, testes).

-----

### Etapa 2: MVP - Modelos Essenciais (O Dom√≠nio)

Vamos construir as classes de dom√≠nio que s√£o o cora√ß√£o do projeto.

**Sua Tarefa (2.1): A Classe `App` (Models/App.cs)**

1. Crie a classe `App` em `Models/App.cs`.
2. Defina as propriedades: `Nome`, `Versao` (string), e `TamanhoEmMb` (int ou double).
3. Implemente um construtor para inicializar essas propriedades.

**Sua Tarefa (2.2): A Classe Abstrata `Smartphone` (Models/Smartphone.cs)**

Este √© o ponto mais importante para a heran√ßa e polimorfismo.

1. Crie a classe `Smartphone` em `Models/Smartphone.cs` e declare-a como **`abstract`**.
2. Defina as propriedades: `Numero`, `Modelo`, `IMEI` (string) e `Memoria` (int, em MB). *Dica: Use `protected set` para propriedades que s√≥ devem ser alteradas no construtor ou na pr√≥pria classe.*
3. Crie uma propriedade para a lista de aplicativos instalados. *Dica: Use `List<App>` internamente e exponha-a como `IReadOnlyList<App>` (Boas Pr√°ticas).*
4. Crie o **construtor** que recebe e inicializa todas as propriedades.
5. **Valida√ß√µes:** No construtor, implemente as regras:
      * `Numero` e `IMEI` n√£o podem ser nulos ou vazios (`ArgumentException`).
      * `Memoria` deve ser um valor positivo (`ArgumentOutOfRangeException`).
6. Defina os m√©todos concretos:
      * `Ligar()`: Simplesmente imprime uma mensagem.
      * `ReceberLigacao(string numero)`: Simplesmente imprime uma mensagem com o n√∫mero.
      * `ListarAplicativos()`: Imprime os nomes dos apps instalados.
7. Defina o m√©todo abstrato que ser√° o foco do polimorfismo:
      * `public abstract Task InstalarAplicativoAsync(App app);` (Vamos usar `Task` agora para preparar para o assincronismo na Etapa 5).

**Resultado Esperado:** Um modelo base seguro e validado, que define o contrato para os smartphones concretos.

-----

### Etapa 3: Implementa√ß√µes Concretas (Polimorfismo em A√ß√£o)

Agora, vamos herdar a classe base e implementar a l√≥gica espec√≠fica de cada marca.

**Sua Tarefa (3.1): Implementar `Nokia` e `iPhone`**

1. Crie as classes `Nokia` e `Iphone` em `Models/Nokia.cs` e `Models/Iphone.cs`, respectivamente.
1. Ambas devem herdar de `Smartphone` (`: Smartphone`).
1. Crie o construtor nas subclasses e use a palavra-chave **`base`** para chamar o construtor da classe `Smartphone`.

```csharp
    public Nokia(string numero, string modelo, string imei, int memoria)
        : base(numero, modelo, imei, memoria)
    {
        // ... implementa√ß√£o espec√≠fica, se houver
    }
```

1. Implemente o m√©todo **`InstalarAplicativoAsync(App app)`** em cada uma, usando a palavra-chave **`override`**.
1. **Comportamento Polim√≥rfico:**
      * Em **`Nokia`**, o m√©todo deve imprimir: *"Instalando o aplicativo \[Nome do App] no Nokia..."*
      * Em **`Iphone`**, o m√©todo deve imprimir: *"Instalando o aplicativo \[Nome do App] na App Store do iPhone..."*
1. Por enquanto, apenas imprima a mensagem. A l√≥gica de adi√ß√£o real √† lista de apps ser√° feita na pr√≥xima etapa.

**Resultado Esperado:** Duas classes concretas que herdam e implementam um comportamento obrigat√≥rio de forma distinta (Polimorfismo).

-----

### Etapa 4: Servi√ßos de Suporte - Storage e AppStore (Inje√ß√£o de Depend√™ncia e Assincronismo)

Para seguir as boas pr√°ticas e facilitar o teste, vamos criar Servi√ßos que cuidam de fun√ß√µes espec√≠ficas, desacoplando a l√≥gica do Smartphone.

**Sua Tarefa (4.1): Criar o Servi√ßo de Armazenamento (`StorageService`)**

A checagem de espa√ßo √© um requisito do projeto.

1. Crie a interface `Services/IStorageService.cs` com o seguinte contrato:
      * `bool ChecarEspaco(Smartphone smartphone, double tamanhoEmMb);`
2. Crie a implementa√ß√£o `Services/StorageService.cs` para essa interface.
3. O m√©todo `ChecarEspaco` deve comparar o espa√ßo dispon√≠vel com o tamanho do app. *Dica: Voc√™ precisar√° somar o tamanho dos apps j√° instalados e comparar com a `Memoria` total do smartphone.*

**Sua Tarefa (4.2): Refatorar a Instala√ß√£o no `Smartphone`**

Agora que temos o `StorageService`, vamos us√°-lo na classe `Smartphone`.

1. Retorne √† classe **`Smartphone`**.
2. Altere o m√©todo abstrato `InstalarAplicativoAsync` para receber uma inst√¢ncia de um servi√ßo (Princ√≠pio da Inje√ß√£o de Depend√™ncia):

```csharp
    public abstract Task InstalarAplicativoAsync(App app, IStorageService storageService);
```

1. No construtor, adicione a l√≥gica para inicializar a lista de aplicativos.
1. Implemente a l√≥gica de instala√ß√£o, de forma **reutiliz√°vel** em uma classe auxiliar (ou no pr√≥prio `Smartphone`):
      * 1. Chame `storageService.ChecarEspaco`.
      * 1. Se houver espa√ßo, adicione o `App` √† lista de instalados e imprima o sucesso.
      * 1. Se n√£o houver espa√ßo, imprima uma mensagem de erro.

**Sua Tarefa (4.3): Criar o Servi√ßo de Loja de Aplicativos (`AppStoreService`)**

Vamos simular o download de um aplicativo, introduzindo `async/await`.

1. Crie a interface `Services/IAppStoreService.cs` com o m√©todo:
      * `Task DownloadAppAsync(Smartphone smartphone, string nomeApp, IStorageService storageService);`
1. Crie a implementa√ß√£o `Services/AppStoreService.cs`.
1. No m√©todo `DownloadAppAsync`:
      * 1. Simule a obten√ß√£o dos dados do App (crie uma inst√¢ncia de `App` com dados fixos, por exemplo).
      * 1. Use **`await Task.Delay(2000);`** para simular um tempo de download de 2 segundos.
      * 1. Chame o m√©todo `smartphone.InstalarAplicativoAsync(app, storageService)` e use **`await`** nessa chamada.

**Resultado Esperado:** O cora√ß√£o da l√≥gica (instala√ß√£o) est√° pronto, usa polimorfismo (`Nokia`/`iPhone`) e depende de um servi√ßo externo (`IStorageService`) para verificar as regras. O `AppStoreService` simula o fluxo completo de download e instala√ß√£o de forma ass√≠ncrona.

-----

### Etapa 5: Demonstra√ß√£o e Teste Inicial (Program.cs)

√â hora de ver o trabalho em a√ß√£o.

#### Sua Tarefa (5.1): Criar a Demonstra√ß√£o (SmartphoneApp/Program.cs)

1. No `Program.cs`, crie uma inst√¢ncia do `StorageService` e do `AppStoreService`.
1. Crie as inst√¢ncias de `Nokia` e `Iphone`. *Dica: D√™ ao iPhone menos mem√≥ria (ex: 64 MB) para testar a valida√ß√£o de espa√ßo.*
1. Execute o cen√°rio de sucesso (app pequeno, mem√≥ria suficiente) usando o `AppStoreService`:

```csharp
    var storage = new StorageService();
    var appStore = new AppStoreService();
    var iphone = new Iphone("123", "X", "IMEI1", 64);
    Console.WriteLine("--- Teste iPhone (Sucesso) ---");
    await appStore.DownloadAppAsync(iphone, "Instagram", storage);
    iphone.ListarAplicativos();
```

1. Execute o cen√°rio de falha (tentar instalar um app grande demais ou v√°rios apps at√© encher a mem√≥ria):

```csharp
    // Crie um AppStoreService que simule o download de um app de 100MB
    Console.WriteLine("\n--- Teste iPhone (Sem Espa√ßo) ---");
    await appStore.DownloadAppAsync(iphone, "Jogo Pesado", storage);
    iphone.ListarAplicativos(); // N√£o deve aparecer o Jogo Pesado
```

### Sua Tarefa (5.2): Adicionar o primeiro Teste Unit√°rio (SmartphoneCore.Tests)

1. No projeto `SmartphoneCore.Tests`, renomeie o arquivo de teste para algo como `SmartphoneTests.cs`.
2. Crie um teste para a regra de valida√ß√£o do construtor: **Se a mem√≥ria for zero ou negativa, deve lan√ßar uma exce√ß√£o.**
      * *Dica: Use `Assert.Throws<ArgumentOutOfRangeException>(() => new Nokia(...));`.*
3. Crie um teste para o m√©todo `Ligar()`. *Dica: Voc√™ precisar√° capturar a sa√≠da do console usando t√©cnicas de teste.*

**Resultado Esperado:** Uma aplica√ß√£o de console funcional que demonstra o fluxo de instala√ß√£o com sucesso e falha, e o primeiro teste unit√°rio garantindo a integridade dos dados de entrada.

-----

### Pr√≥ximos Passos (Avan√ßado)

Ap√≥s a Etapa 5, o seu MVP estar√° completo\! Voc√™ j√° ter√° implementado Heran√ßa, Polimorfismo, Encapsulamento, Valida√ß√µes, Inje√ß√£o de Depend√™ncia e Assincronismo.

Seu pr√≥ximo foco deve ser:

1. **Eventos (`Events/`)**: Implementar a notifica√ß√£o de eventos (`ReceberLigacao`, `InstalacaoConcluida`) usando `EventHandler` e disparar esses eventos nos m√©todos relevantes.
2. **Persist√™ncia (`Persistence/`)**: Implementar o `JsonPersistence` para salvar e carregar o estado do smartphone (incluindo a lista de apps) em um arquivo `.json` usando a biblioteca `System.Text.Json`.

**Continue o bom trabalho\! Qual das tarefas da Etapa 2 voc√™ gostaria de come√ßar primeiro?**
