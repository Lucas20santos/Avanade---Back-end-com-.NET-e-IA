# 📱 Projeto Smartphone — DIO (.NET)  

![Banner Smartphone](https://media.giphy.com/media/3o7btPCcdNniyf0ArS/giphy.gif)

Breve projeto para modelar uma abstração de smartphone (classe abstrata) e implementar comportamentos específicos para Nokia e iPhone. Ideal para praticar herança, polimorfismo, eventos, async e persistência.

---

## 🔎 Contexto

- 🎯 Objetivo: mapear um Smartphone abstrato com propriedades e métodos comuns e implementar Nokia e iPhone com formas diferentes de instalar apps.
- 🧭 Diagrama: ver imagem no repositório (image.png).

---

## ✅ Regras principais

- 🛑 A classe `Smartphone` deve ser `abstract`.
- 📎 `Nokia` e `Iphone` devem herdar `Smartphone`.
- 🔁 `InstalarAplicativo(string nome)` deve ser `abstract` em `Smartphone` e sobrescrito em cada subclass.
- ⚠️ Validações: número/IMEI não nulos, memória positiva, checagem de espaço antes de instalar.

---

## 🛠️ Solução / TODO

O código do exercício contém marcadores `// TODO` — complete-os seguindo as regras acima para obter um programa funcional.

---

## 🛠️ Desenvolvimento do Projeto

Resumo e diretivas para evoluir o módulo `smartphone`.

### 🎯 Objetivos do módulo

- Abstrair smartphone (propriedades: Numero, Modelo, IMEI, Memoria).
- Implementar comportamentos concretos (Nokia, iPhone).
- Suportar extensões: AppStore, Storage, eventos e persistência.

### 📐 Arquitetura sugerida (estrutura de pastas)

- Models/
  - Smartphone (abstract) — Numero, Modelo, IMEI, Memoria; Ligar(), ReceberLigacao(), InstalarAplicativo(string) (abstract).
  - Nokia, Iphone — implementações específicas.
  - App — Nome, Versao, Tamanho.
- Services/
  - AppStoreService — catálogo, download (simulado).
  - StorageService — checagem de espaço e remoção.
  - UpdateService — atualizações de sistema (simulados).
- Persistence/
  - JsonPersistence — salvar/carregar estado com System.Text.Json.
- Events/
  - Eventos com EventHandler (ReceberLigacao, InstalacaoConcluida).
- Utils/
  - Helpers, logging simples.

### 🔒 Boas práticas

- Valide parâmetros no construtor e nas propriedades (ArgumentNullException / ArgumentException).  
- Use propriedades (PascalCase) e encapsulamento.  
- Exponha coleções como `IReadOnlyList`.  
- I/O assíncrono com `async/Task` para simular downloads.  
- Cobrir lógica com testes unitários (xUnit).

### 📈 Roadmap curto (tarefas incrementais)

1. Implementar `App` e lista de apps instalados (persistência JSON).  
2. Criar `AppStoreService` com `Task.Delay` para simular download.  
3. Adicionar `StorageService` para checar memória antes da instalação.  
4. Implementar eventos (`ReceberLigacao`, `InstalacaoConcluida`).  
5. Exemplo em `Program.cs` demonstrando fluxo completo.  
6. Adicionar testes (xUnit).

---

## ⚙️ Como executar (rápido)

1. Abra terminal na pasta do módulo:

```sh
cd smartphone
dotnet run
```

1. Após adicionar testes

```sh
dotnet test
```

---

## 📌 Exemplos de uso (esperado)

```csharp
var nokia = new Nokia("5511999999999", "Nokia X", "IMEI123", 1024);
await AppStoreService.DownloadAppAsync(nokia, "WhatsApp");
nokia.ListarAplicativos();
```

---

## ✨ Funcionalidades recomendadas (ideias rápidas)

- 🛒 Loja de apps com compatibilidade por modelo/OS.  
- 💾 Gerenciamento de armazenamento por app.  
- 🔁 Atualizações OTA simuladas.  
- 🔐 Segurança (PIN) para ações sensíveis.  
- 🔔 Eventos e notificações; logs persistentes.  
- ♻️ Persistência JSON/SQLite para estado do aparelho.

---

## 🤝 Contribuição

- Crie branch `feature/<nome>` para cada feature.  
- Abra PR com descrição e exemplos de uso.  
- Documente novas features no README da pasta.

---

## 📬 Contato / Referência

- Use o README raiz do workspace para navegar entre módulos.  
- Se quiser, atualizo o README com badges, GIFs e exemplos prontos de `AppStoreService` e persistência.

---

## 🧭 Guia passo a passo — Como iniciar (implementação incremental)

Siga esta ordem para implementar o módulo de forma segura, testável e incremental.

1. Estrutura inicial (crie projetos/sln antes)

- smartphone/
  - SmartphoneCore/ (classlib)
    - Models/
    - Services/
    - Persistence/
    - Events/
    - Utils/
  - SmartphoneApp/ (console demo)
  - SmartphoneCore.Tests/ (xUnit)

1. MVP (Modelos essenciais) — prioridade alta

- Criar App.cs (Nome, Versao, TamanhoEmMb).
- Criar Smartphone.cs (abstract) com validações: Numero, Modelo, IMEI, Memoria; métodos Ligar(), ReceberLigacao(); InstalarAplicativoAsync(App, IStorageService) abstrato.
Motivo: define domínio e contrato.

1. Implementações concretas (testar polimorfismo)

- Criar Nokia.cs e Iphone.cs herdando Smartphone e implementando InstalarAplicativoAsync.
Motivo: validar diferenças de comportamento.

1. Storage (controle de espaço)

- Definir IStorageService (ChecarEspaco, Alocar, Liberar).
- Implementar StorageService simples (memória usada/disponível).
Motivo: requisito para instalar apps.

1. AppStore (simulação async)

- Definir IAppStoreService e AppStoreService (GetAppInfo, DownloadAppAsync com Task.Delay).
Motivo: integra Models + Storage e testa async.

1. Persistence

- Definir IStatePersistence e JsonPersistence (salvar/carregar estado do aparelho e apps).
Motivo: manter estado entre execuções e facilitar testes manuais.

1. Events / Delegates

- Criar EventArgs (InstalacaoConcluidaEventArgs, LigacaoEventArgs).
- Disparar eventos em pontos relevantes (após instalação, ligação).
Motivo: design reativo e separação de responsabilidades.

1. Utils / Logging

- Criar ValidationHelpers e LoggerSimple (Console).
Motivo: reutilização e diagnósticos.

1. Demo e testes

- Implementar cenários em SmartphoneApp (instalar com sucesso, sem espaço, listar apps, persistir).
- Criar testes xUnit cobrindo regras críticas (validações, storage, download).
Motivo: garantir qualidade e regressão.

1. Incrementos futuros (após MVP)

- Compatibilidade por modelo/OS, OTA updates, UI/menu, SQLite, CI/CD.

### Checklist rápido (arquivos mínimos a criar)

- Models/App.cs
- Models/Smartphone.cs
- Models/Nokia.cs
- Models/Iphone.cs
- Services/IStorageService.cs, Services/StorageService.cs
- Services/IAppStoreService.cs, Services/AppStoreService.cs
- Persistence/IStatePersistence.cs, Persistence/JsonPersistence.cs
- Events/EventArgs.cs
- Utils/ValidationHelpers.cs, Utils/LoggerSimple.cs
- SmartphoneApp/Program.cs (cenários)
- SmartphoneCore.Tests/* (tests)

---

_Bom desenvolvimento!_
